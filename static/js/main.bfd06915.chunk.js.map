{"version":3,"sources":["const.js","deck.js","components/Card/index.js","components/Board/index.js","App.js","reportWebVitals.js","index.js"],"names":["CARD_TECHS","initializeDeck","level","id","cards_number","cards_list","slice","cards","forEach","name","push","array","_array","i","length","randomIndex","Math","floor","random","temp","shuffle","Card","handleClick","flipped","className","onClick","Board","flippedCards","style","map","card","includes","App","useState","setLevel","setCards","setFlippedCards","resolvedCards","setResolvedCards","disabled","setDisabled","newGame","setNewGame","playGame","setPlayGame","score","setScore","timer","setTimer","timerRef","useRef","findCard","cardId","find","startGame","useEffect","current","setInterval","clearInterval","alert","type","evt","width","clickCardId","currentTarget","copyFlippedCards","filter","has_match","clickCard","matchCardId","undefined","hasMatch","flippedNoMatchCards","setTimeout","newFlippedCards","increaseScore","pow","updateScore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfd06915.chunk.js","sourcesContent":["export const CARD_TECHS = [\n  'html5',\n  'css3',\n  'js',\n  'sass',\n  'nodejs',\n  'react',\n  'linkedin',\n  'heroku',\n  'github',\n  'aws'\n];","import { CARD_TECHS } from \"./const\";\n\nfunction shuffle(array) \n{\n  const _array = array.slice(0);\n  for(let i = 0; i < array.length -1 ; i++)\n  {\n    let randomIndex = Math.floor(Math.random() * (i + 1))\n    let temp = _array[i];\n    _array[i] = _array[randomIndex];\n    _array[randomIndex] = temp;\n  }\n\n  return _array\n}\n\nfunction initializeDeck(level) {\n    let id = 0;\n    const cards_number = level * 2;\n    const cards_list = CARD_TECHS.slice(0, cards_number);\n\n    let cards = [];\n\n    cards_list.forEach((name) => {\n        cards.push({\n            id: id++,\n            name\n          })\n        cards.push({\n            id: id++,\n            name\n        })\n    })\n    return shuffle(cards)\n\n}\n\nexport default initializeDeck","import './style.css';\n\nfunction Card ({id, name, handleClick, flipped}) {\n    return (\n        <div className={`card ${name} ${flipped ? 'card--flipped' : ''}` } data-tech=\"css3\" onClick = {handleClick} id={id}>\n            <div className=\"card__face card__face--front\"></div>\n            <div className=\"card__face card__face--back\"></div>\n        </div>\n    )\n}\n\nexport default Card;","import Card from \"../Card\";\nimport './style.css'\n\nfunction Board ({cards, handleClick, flippedCards}) {\n    return(\n        <div className=\"game-board\" style={{'gridTemplateColumns': '1fr 1fr'}}>\n            {\n                cards.map((card) => {\n                    return (\n                        <Card key={card.id} id={card.id} name = {card.name} handleClick={handleClick}  flipped={flippedCards.includes(card.id)}/>\n                    )\n                })\n            }\n        </div>\n    ) \n}\n\nexport default Board;","import { useEffect, useState, useRef} from 'react';\nimport './App.css';\nimport initializeDeck from './deck';\nimport Board from './components/Board';\n\nfunction App() {\n  const [level, setLevel] = useState(1);\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([])\n  const [resolvedCards, setResolvedCards] = useState([])\n  const [disabled, setDisabled] = useState(false)\n  const [newGame, setNewGame] = useState(false)\n  const [playGame, setPlayGame] = useState(true)\n  const [score, setScore] = useState(0)\n  const [timer, setTimer] = useState(60);\n\n  const timerRef = useRef()\n\n  function findCard(cardId) {\n    return cards.find(card => card.id === cardId)\n  }\n\n  function hasMatch (clickCardId) {\n    const clickCard = findCard(clickCardId);\n    let matchCardId = flippedCards.find(id => {\n          let card = findCard(id);\n          return id !== clickCardId && card.name === clickCard.name\n    });\n    if (matchCardId === undefined) {\n      return []\n    } else {\n      return [clickCardId,matchCardId]\n    }\n  } \n  function findFlippedNoMatchCards () {\n    return flippedCards.filter((id) =>  !resolvedCards.includes(id))\n  }\n  function updateScore () {\n    const increaseScore = Math.pow(level, 2) + timer\n    setScore(score => score + increaseScore)\n  }\n  function endGame () {\n    alert(score)\n    setDisabled(true)\n  }\n\n  useEffect(() => {\n\n    if (newGame && playGame) {\n        timerRef.current = setInterval(() => {\n        setTimer(timer => {\n\n          if (timer === 0) {\n            setPlayGame(false)\n            return timer\n          } else {\n            return timer - 1\n          }\n        })\n      },1000)\n\n    }\n    if (playGame === false) {\n      clearInterval(timerRef.current);\n\n      endGame()\n    }\n  }, [newGame, playGame])\n  const handleClick = (evt) => {\n    let clickCardId = +evt.currentTarget.id\n\n    \n    // debugger\n    if (!resolvedCards.includes(clickCardId) && !disabled) {\n      \n      if (!flippedCards.includes(clickCardId)) {\n          let has_match = hasMatch(clickCardId);\n          if (has_match.length === 0) {\n            const flippedNoMatchCards = findFlippedNoMatchCards();\n            if (flippedNoMatchCards.length === 0) {\n              setFlippedCards([...flippedCards, clickCardId])\n\n            } else {\n              setDisabled(true)\n              setFlippedCards([...flippedCards, clickCardId]);\n              setTimeout(() => {\n                const newFlippedCards = flippedCards.filter(cardId => cardId !== flippedNoMatchCards[0])\n                setFlippedCards(newFlippedCards)\n                setDisabled(false)\n              }, 1500);\n            }\n          } else {\n            setFlippedCards([...flippedCards, clickCardId]);\n            setResolvedCards([...resolvedCards, ...has_match])\n            updateScore();\n          }\n      } else {\n         const copyFlippedCards = flippedCards.filter(cardId => cardId !== clickCardId)\n        setFlippedCards(copyFlippedCards)\n      }\n\n    }\n\n\n\n\n  }\n\n  const handleNewGameClick = (evt) => {\n    setNewGame(true)\n\n  }\n  const handlePlayGameClick = (evt) => {\n      setPlayGame(!playGame)\n  }\n  function reset() {\n    setLevel(1);\n    setCards([])\n    setFlippedCards([])\n    setResolvedCards([])\n    setPlayGame(true)\n    setScore(0)\n    setTimer(60)\n  }\n  function startGame() {\n    reset()\n    setCards(initializeDeck(level))\n    setDisabled(false)\n  }\n  useEffect(() => {\n    if (playGame=== true) {\n        startGame()\n    } \n  }, [playGame])\n  return (\n    <div className=\"App\">\n      <h1 className=\"game-title\">The classic MeMmmm Game</h1>\n      <div className=\"game-stats\">\n        <div className=\"game-stats__level\">\n          <div className=\"game-stats__level--label\">Current Level:</div>\n          <div className=\"game-stats__level--value\">{level}</div>\n        </div>\n        <div className=\"game-stats__score\">\n          <div className=\"game-stats__score--label\">Score:</div>\n          <div className=\"game-stats__score--value\">{score}</div>\n        </div>\n        {newGame ? (\n          <button className=\"game-stats__button\" type=\"button\" onClick = {handlePlayGameClick}>\n            {playGame ? 'End Game': 'Start Game'}\n          </button>\n        ) : (\n          <button className=\"game-stats__button\" type=\"button\" onClick ={handleNewGameClick}>\n            New Game\n          </button>\n        )}\n      </div>\n      <div className=\"game-timer\">\n        <div className=\"game-timer__bar\" style={{width: `${timer*100/60}%`}}>{timer}s</div>\n      </div>\n      {newGame ? (\n        <Board\n          cards={cards}\n          handleClick={handleClick}\n          flippedCards={flippedCards}\n        />\n      ) : (\n        <div className=\"game-board\">\n          <div className=\"game-instruction\">\n            <h3 className=\"game-instruction__header\">Instruction</h3>\n            <p className=\"game-instruction__content\">\n              - Click on the card to view the back face of the card. <br />\n              - Get two exact same card to score.\n              <br />- Score are based on the time and level. <br />- You only\n              have 60s for each level. <br />- There are three levels, '2x2',\n              '4x4' and '6x6'. <br />- Press 'Start Game' button when you are\n              ready.\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React,{useState, useEffect}from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}